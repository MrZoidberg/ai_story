import Head from 'next/head';
import * as React from 'react';
import styles from '../styles/Home.module.css';
import Layout, { siteTitle } from '../components/layout';
import StoriesGrid from '../components/stories_grid';
import MyAppBar from '../components/app_bar';
import { storiesFetcher } from '../src/api';
import { SWRConfig } from 'swr';
import { unstable_serialize } from "swr/infinite";
import TelegramIcon from '@mui/icons-material/Telegram';
import { setLanguage, getLanguage, DEFAULT_LANG } from '../src/langService';
import { LangSwitcher } from '../components/langSwitcher';
import { useEffect, useState } from 'react';

const isServer = typeof window === 'undefined';

function Home({ fallback }) {
  const [currentLang, setCurrentLang] = useState(() => DEFAULT_LANG);
  //const currentLang = getLanguage();

  const initialize = () => {
    if (isServer) {
      return DEFAULT_LANG;
    }
    try {
      return getLanguage();
    } catch (error) {
      return DEFAULT_LANG;
    }
  };

  /* prevents hydration error so that state is only initialized after server is defined */
  useEffect(() => {
    if (!isServer) {
      const newLang = initialize();
      if (newLang !== currentLang) {
        setCurrentLang(newLang);
      }
    }
  }, []);

  const changeLang = (newLang) => {
    if (newLang !== currentLang) {
      //console.log('app lang changed to ', newLang);
      setLanguage(newLang);
      setCurrentLang(newLang);      
    }
  }

  return (
    <Layout home>
      <Head>
        <title>{siteTitle}</title>
      </Head>
      <MyAppBar>
        <LangSwitcher currentLocale={currentLang} setLocale={changeLang} />
      </MyAppBar>
      <section className={styles.headerSection}>
        <h1 className={styles.title}>
          Welcome to <a href="https://t.me/AIGPTStoriesBot" target="_">RoboStories!</a>
        </h1>

        <p className={styles.description}>
          Funny stories generated by GPT-3 and other AI models
        </p>
        <p className={styles.description}>
          <a href="https://t.me/AIGPTStoriesBot" className={styles.texticon} target="_">Try our <TelegramIcon className={styles.texticon} /> bot</a>
        </p>
      </section>
      <SWRConfig value={{ fallback }}>
        <StoriesGrid locale={currentLang} />
      </SWRConfig>
    </Layout>
  )
}


// This function gets called at build time on server-side.
// It won't be called on client-side, so you can even do
// direct database queries.
export async function getStaticProps() {
  const { url, data } = await storiesFetcher(DEFAULT_LANG, 10);
  //console.log(`getStaticProps: ${url(0)}`, data);

  // By returning { props: { posts } }, the Blog component
  // will receive `posts` as a prop at build time
  return {
    props: {
      fallback: {
        [unstable_serialize((_) => url(0))]: [data],
      }
    },
  }
}

export default Home